var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.199,1,2.097]],["body/classes/AllExceptionsFilter.html",[0,0.186,1,2.721,2,1.524,3,0.446,4,0.388,5,0.388,6,3.177,7,2.297,8,3.177,9,4.437,10,0.507,11,1.23,12,3.119,13,3.87,14,4.437,15,4.788,16,0.718,17,2.798,18,0.718,19,0.041,20,0.643,21,0.507,22,0.718,23,4.788,24,0.889,25,2.297,26,0.446,27,3.643,28,2.297,29,0.388,30,2.798,31,0.446,32,1.366,33,1.269,34,2.297,35,2.798,36,1.967,37,2.798,38,2.38,39,3.643,40,2.798,41,2.798,42,5.432,43,2.798,44,2.297,45,1.219,46,3.119,47,3.533,48,2.798,49,2.798,50,2.798,51,2.297,52,2.798,53,2.798,54,0.026,55,0.026]],["title/modules/AppModule.html",[56,1.053,57,1.834]],["body/modules/AppModule.html",[0,0.213,3,0.509,4,0.443,5,0.443,19,0.041,26,0.838,29,0.443,31,0.509,54,0.029,55,0.029,56,1.675,57,3.518,58,1.39,59,1.55,60,1.961,61,1.961,62,1.55,63,2.303,64,1.737,65,2.619,66,2.619,67,2.626,68,2.626,69,2.626,70,2.601,71,1.961,72,1.737,73,3.19,74,2.974,75,3.19,76,3.19,77,1.961,78,3.19,79,3.19,80,3.19,81,3.19,82,2.243,83,2.243]],["title/controllers/AuthController.html",[84,1.834,85,1.834]],["body/controllers/AuthController.html",[0,0.113,3,0.27,4,0.235,5,0.235,10,0.307,11,0.849,16,1.046,18,0.962,19,0.041,20,0.861,21,0.821,22,0.962,24,1.295,26,0.817,29,0.235,31,0.27,32,0.942,33,0.485,36,2.322,38,2.031,46,2.322,54,0.018,55,0.018,83,1.192,84,1.043,85,1.642,86,1.392,87,1.696,88,3.746,89,2.318,90,2.67,91,2.67,92,3.746,93,2.67,94,2.67,95,1.696,96,3.038,97,3.183,98,4.941,99,4.075,100,2.67,101,1.696,102,1.895,103,1.696,104,1.696,105,1.696,106,1.696,107,1.696,108,1.696,109,1.696,110,1.696,111,1.696,112,2.303,113,1.696,114,1.642,115,1.696,116,3.303,117,1.696,118,1.696,119,1.696,120,1.696,121,1.392,122,1.294,123,1.043,124,0.824,125,1.043,126,2.192,127,1.454,128,1.877,129,1.192,130,1.696,131,1.642,132,1.696,133,0.824,134,1.043,135,1.046,136,1.392,137,2.322,138,1.192,139,1.696,140,1.043,141,1.392,142,1.696,143,0.598,144,1.877,145,1.454,146,1.192,147,1.696,148,1.696,149,1.696,150,2.67,151,2.711,152,2.67,153,1.696,154,1.696,155,1.696,156,1.696,157,1.696,158,2.192,159,1.164,160,1.696,161,1.05,162,1.298,163,1.696,164,1.696,165,2.67,166,2.505,167,1.696,168,2.67,169,1.696,170,1.696,171,1.696,172,1.696,173,0.923,174,1.696,175,1.696,176,1.696,177,1.696,178,1.392,179,1.696,180,1.696,181,1.696,182,1.696,183,1.696]],["title/modules/AuthModule.html",[56,1.053,67,1.45]],["body/modules/AuthModule.html",[0,0.175,3,0.418,4,0.364,5,0.364,19,0.041,26,0.878,29,0.364,31,0.418,54,0.025,55,0.025,56,1.512,58,1.142,59,1.273,60,1.611,61,1.611,62,1.273,63,2.333,64,1.427,67,2.805,69,1.797,70,2.273,71,1.611,72,1.427,74,1.842,82,1.842,83,2.599,85,2.634,122,1.996,123,1.611,124,2.474,125,1.611,126,3.035,133,2.474,134,1.611,184,2.151,185,2.151,186,2.773,187,2.773,188,2.773,189,2.62,190,3.035,191,2.62,192,2.62,193,2.62,194,1.142,195,2.62,196,3.035,197,2.62,198,2.62,199,2.62]],["title/injectables/AuthService.html",[122,1.169,200,0.541]],["body/injectables/AuthService.html",[0,0.121,3,0.288,4,0.251,5,0.251,10,0.328,11,0.893,12,1.272,16,0.996,18,0.996,19,0.041,20,1.132,21,0.762,22,0.996,24,1.094,26,0.67,29,0.251,31,0.288,32,1.215,33,1.439,39,1.485,45,2.194,54,0.019,55,0.019,89,2.146,102,1.483,112,2.386,121,1.485,122,1.101,127,0.985,128,1.272,134,1.727,135,1.521,143,0.639,145,0.985,146,1.974,159,1.938,161,1.233,162,1.886,166,1.112,173,2.421,200,0.509,201,0.709,202,1.485,203,2.809,204,2.809,205,2.809,206,1.809,207,1.809,208,2.809,209,1.809,210,2.809,211,3.449,212,1.809,213,2.809,214,2.42,215,1.809,216,2.853,217,2.306,218,1.809,219,2.306,220,1.974,221,1.112,222,1.272,223,1.272,224,2.809,225,3.443,226,2.953,227,2.809,228,2.809,229,2.809,230,1.809,231,1.809,232,2.728,233,1.809,234,1.809,235,2.809,236,1.809,237,1.809,238,2.809,239,2.809,240,1.809,241,2.809,242,2.809,243,2.306,244,1.485,245,1.809,246,1.809,247,1.809,248,2.826,249,1.809,250,1.809,251,2.306,252,1.809,253,2.826,254,1.809,255,1.485,256,1.809,257,1.809]],["title/modules/DatabaseModule.html",[56,1.053,68,1.45]],["body/modules/DatabaseModule.html",[0,0.22,3,0.526,4,0.458,5,0.458,19,0.041,26,0.87,29,0.458,31,0.526,33,0.944,54,0.029,55,0.029,56,1.526,58,1.438,63,1.797,64,1.797,68,2.102,77,2.029,161,1.049,162,1.603,243,2.709,258,3.3,259,4.204,260,4.825,261,2.709,262,3.04,263,2.709,264,2.709,265,2.967,266,3.3,267,2.709,268,3.04,269,3.3,270,3.3,271,3.3,272,3.3,273,3.3,274,2.319,275,2.709]],["title/classes/GResponse.html",[0,0.199,131,1.834]],["body/classes/GResponse.html",[0,0.191,2,1.559,3,0.456,4,0.397,5,0.397,10,0.519,16,1.301,18,0.735,19,0.041,20,0.658,21,0.919,22,0.735,26,0.456,28,3.687,29,0.397,31,0.456,38,2.761,45,1.714,46,3.157,47,3.157,54,0.027,55,0.027,131,2.418,143,1.01,166,2.761,173,2.446,276,2.35,277,2.764,278,3.932,279,4.491,280,3.932,281,3.932,282,2.863,283,3.969,284,3.399,285,2.863,286,2.764,287,4.491,288,2.863,289,4.491,290,2.863,291,2.863,292,2.863,293,2.863,294,2.863,295,2.863,296,2.863,297,2.863,298,2.863]],["title/injectables/GithubAuthGuard.html",[133,1.45,200,0.541]],["body/injectables/GithubAuthGuard.html",[0,0.227,3,0.543,4,0.472,5,0.472,10,0.617,11,1.403,16,0.874,18,0.874,19,0.04,20,0.782,21,0.617,22,0.874,24,1.082,26,0.704,29,0.472,31,0.543,32,1.201,33,1.262,54,0.03,55,0.03,89,2.135,97,3.102,133,2.145,159,1.923,161,1.082,194,1.483,200,0.8,201,1.334,286,2.392,299,3.623,300,2.392,301,2.145,302,4.413,303,3.623,304,3.623,305,3.643,306,3.403,307,2.794,308,2.794,309,2.794,310,2.794,311,2.794,312,2.794]],["title/injectables/GithubStratergy.html",[186,1.625,200,0.541]],["body/injectables/GithubStratergy.html",[0,0.17,3,0.408,4,0.355,5,0.355,10,0.464,11,1.155,12,1.798,16,0.933,18,0.933,19,0.041,20,0.835,21,0.659,22,0.933,24,0.813,26,0.805,29,0.355,31,0.408,32,0.903,33,0.732,45,2.202,54,0.025,55,0.025,77,1.573,89,1.842,102,1.283,122,2.037,123,1.573,135,1.804,136,2.1,143,1.283,144,2.972,145,2.302,146,2.972,159,1.115,161,1.155,173,1.393,186,1.979,194,1.115,200,0.659,201,1.003,211,4.266,221,1.573,222,1.798,244,2.1,248,2.1,259,4.147,301,1.766,313,2.1,314,2.984,315,2.984,316,2.558,317,2.558,318,3.635,319,4.228,320,4.228,321,2.558,322,2.558,323,2.1,324,2.1,325,1.798,326,2.558,327,2.558,328,2.558,329,2.558,330,2.558,331,2.558,332,2.558,333,2.558,334,2.558,335,2.558,336,2.558]],["title/injectables/LocalAuthGuard.html",[124,1.45,200,0.541]],["body/injectables/LocalAuthGuard.html",[0,0.217,3,0.518,4,0.451,5,0.451,10,0.589,11,1.361,16,1.099,18,0.834,19,0.041,20,0.747,21,0.589,22,0.834,24,1.033,26,0.683,29,0.451,31,0.518,32,1.147,33,1.225,54,0.029,55,0.029,82,2.285,89,2.087,97,3.01,124,2.081,143,1.69,159,1.866,161,1.033,194,1.416,200,0.776,201,1.274,286,2.285,300,2.285,301,2.081,303,3.515,304,3.515,305,3.579,307,2.668,308,2.668,309,2.668,310,2.668,311,2.668,312,2.668,325,2.285,337,3.932,338,4.282,339,3.25,340,3.25,341,3.25]],["title/injectables/LocalStratergy.html",[187,1.625,200,0.541]],["body/injectables/LocalStratergy.html",[0,0.199,3,0.475,4,0.414,5,0.414,10,0.541,11,1.285,16,1.038,18,1.038,19,0.041,20,0.929,21,0.733,22,1.038,24,0.948,26,0.784,29,0.414,31,0.475,32,1.052,33,0.853,45,2.31,54,0.028,55,0.028,89,1.999,102,1.427,122,2.077,123,1.833,125,1.833,143,1.052,145,1.623,159,1.299,161,0.948,187,2.201,194,1.299,200,0.733,201,1.168,214,3.613,216,2.485,221,1.833,223,2.096,301,1.964,314,3.318,315,3.318,323,2.447,324,2.447,325,2.096,342,2.447,343,2.981,344,2.981,345,4.042,346,3.765,347,2.981,348,2.981,349,2.981,350,2.981,351,2.447]],["title/injectables/SessionSerializer.html",[188,1.625,200,0.541]],["body/injectables/SessionSerializer.html",[0,0.216,3,0.516,4,0.449,5,0.449,10,0.587,11,1.358,16,1.097,18,1.097,19,0.04,20,0.981,21,0.775,22,1.097,24,1.358,25,3.507,26,0.681,29,0.449,31,0.516,54,0.029,55,0.029,102,1.508,188,2.326,194,1.411,200,0.775,201,1.269,301,2.076,346,4.455,351,3.507,352,3.925,353,2.658,354,4.781,355,4.272,356,4.272,357,4.272,358,4.455,359,3.238,360,4.272,361,4.272,362,3.238]],["title/modules/UsersModule.html",[56,1.053,69,1.45]],["body/modules/UsersModule.html",[0,0.215,3,0.514,4,0.448,5,0.448,19,0.04,26,0.809,29,0.448,31,0.514,54,0.029,55,0.029,56,1.684,58,1.406,59,1.568,60,1.983,61,1.983,62,1.568,63,2.598,64,2.598,67,2.071,68,2.635,69,2.76,70,2.62,71,1.983,72,1.757,74,2.996,135,2.28,190,3.498,363,2.648,364,2.648,365,2.648,366,3.226,367,3.226,368,3.226,369,3.226,370,3.226]],["title/injectables/UsersService.html",[135,1.169,200,0.541]],["body/injectables/UsersService.html",[0,0.144,3,0.345,4,0.301,5,0.301,10,0.393,11,1.024,16,1.093,18,1.093,19,0.041,20,0.978,21,0.697,22,1.093,24,1.222,26,0.76,29,0.301,31,0.345,32,1.357,33,1.301,44,1.779,45,2.078,54,0.022,55,0.022,89,2.259,102,1.791,135,1.263,143,1.137,144,1.524,145,1.18,158,1.779,159,1.856,161,1.222,162,1.869,200,0.584,201,0.849,216,2.618,217,1.779,226,2.703,232,3.199,262,2.703,263,1.779,264,1.779,265,1.333,267,1.779,274,2.265,275,1.779,371,1.779,372,3.222,373,3.222,374,3.222,375,2.167,376,4.258,377,2.167,378,3.222,379,3.222,380,2.167,381,3.222,382,2.167,383,3.222,384,2.167,385,2.167,386,1.524,387,2.167,388,1.779,389,2.167,390,2.167,391,2.167,392,2.167,393,2.167,394,3.222,395,2.167,396,2.167,397,2.167,398,2.167,399,2.167,400,3.846,401,2.167,402,2.167,403,2.167,404,2.167,405,3.222,406,2.167,407,2.167,408,2.167,409,2.167,410,3.222,411,3.222,412,2.167]],["title/classes/ValidationException.html",[0,0.199,413,2.097]],["body/classes/ValidationException.html",[0,0.255,2,2.083,3,0.61,4,0.531,5,0.531,16,0.982,18,0.982,19,0.04,20,0.879,21,0.693,22,0.982,26,0.61,27,4.245,29,0.531,31,0.61,36,2.689,38,3.326,54,0.032,55,0.032,143,1.35,301,2.31,413,3.341,414,3.14,415,4.753,416,5.171,417,3.825,418,3.825]],["title/classes/ZodValidationPipe.html",[0,0.199,114,1.834]],["body/classes/ZodValidationPipe.html",[0,0.203,2,1.658,3,0.485,4,0.422,5,0.422,8,3.366,10,0.552,11,1.303,16,1.053,18,1.053,19,0.041,20,0.942,21,0.743,22,1.053,24,0.968,26,0.654,29,0.422,31,0.485,33,1.326,47,2.882,54,0.028,55,0.028,114,2.521,143,1.074,161,1.303,162,1.479,178,2.499,223,2.14,226,2.14,274,2.882,284,2.882,419,2.499,420,4.635,421,4.1,422,3.044,423,4.96,424,3.044,425,4.1,426,3.805,427,4.96,428,3.044,429,3.044,430,2.499,431,3.044,432,3.044,433,3.044,434,3.044,435,3.044,436,3.044,437,3.044,438,3.044,439,3.044,440,3.044,441,3.044]],["title/coverage.html",[442,2.843]],["body/coverage.html",[0,0.291,1,1.604,5,0.317,6,1.873,7,1.873,19,0.04,21,0.843,54,0.023,55,0.023,62,1.109,84,1.403,85,1.403,86,1.873,96,1.403,102,1.772,112,1.403,114,1.403,122,0.894,124,1.109,127,2.531,129,1.604,131,1.403,133,1.109,135,0.894,137,1.604,138,1.604,140,2.058,162,1.109,186,1.242,187,1.242,188,1.242,200,0.91,202,1.873,220,1.604,265,1.403,268,1.604,276,1.873,299,1.873,300,2.353,313,1.873,337,1.873,342,1.873,352,1.873,353,1.873,358,1.873,371,1.873,386,1.604,413,1.604,414,1.873,419,1.873,442,1.604,443,1.873,444,2.282,445,2.282,446,5.894,447,3.346,448,3.963,449,1.873,450,5.341,451,5.62,452,4.648,453,3.346,454,1.873,455,1.873,456,3.268,457,1.873,458,2.747,459,4.365,460,2.353,461,1.873,462,2.786,463,2.747,464,1.873,465,1.873,466,2.282,467,2.282]],["title/dependencies.html",[59,1.74,468,2.056]],["body/dependencies.html",[19,0.041,29,0.496,54,0.031,55,0.031,59,1.736,77,2.196,125,2.196,141,3.737,151,2.932,194,1.557,196,2.932,219,2.932,221,2.799,222,2.511,261,2.932,262,2.511,388,2.932,426,2.932,430,2.932,469,5.011,470,3.572,471,3.572,472,3.572,473,3.572,474,3.572,475,3.572,476,3.572,477,3.572,478,3.572,479,3.572,480,3.572,481,3.572,482,3.572,483,3.572,484,3.572,485,3.572,486,3.572,487,3.572,488,3.572]],["title/miscellaneous/functions.html",[489,1.217,490,2.939]],["body/miscellaneous/functions.html",[10,0.812,19,0.036,54,0.036,55,0.036,62,2.69,455,3.676,489,2.176,490,3.676,491,4.478]],["title/index.html",[10,0.454,492,2.505,493,2.505]],["body/index.html",[4,0.282,19,0.038,51,1.67,54,0.021,55,0.021,72,2.536,442,1.43,443,2.523,494,2.035,495,2.035,496,3.703,497,3.073,498,2.035,499,2.035,500,2.035,501,3.073,502,1.67,503,3.703,504,2.035,505,2.035,506,2.035,507,4.126,508,2.035,509,4.126,510,4.979,511,2.035,512,4.836,513,2.035,514,2.035,515,2.035,516,3.073,517,2.035,518,3.073,519,2.035,520,3.703,521,2.035,522,3.073,523,2.035,524,2.035,525,2.035,526,2.035,527,2.035,528,4.126,529,4.979,530,4.658,531,2.035,532,3.073,533,2.035,534,2.035,535,2.035,536,2.035,537,2.035,538,4.658,539,3.073,540,4.126,541,2.035,542,3.073,543,2.035,544,2.035,545,3.073,546,4.658,547,4.126,548,2.035,549,3.073,550,2.035,551,2.035,552,2.035,553,2.035,554,4.126,555,2.035,556,2.035,557,2.035,558,2.035,559,3.073,560,2.035,561,2.035,562,2.035,563,2.035,564,2.035,565,3.073,566,2.035,567,2.035,568,2.035,569,3.073,570,2.035,571,2.035,572,3.387,573,3.073,574,2.035,575,2.035,576,2.035,577,2.035,578,2.035,579,2.035,580,2.035,581,2.035,582,3.073,583,2.035,584,1.67,585,2.035,586,2.035,587,3.703,588,2.035,589,2.035,590,2.035,591,2.035,592,2.035,593,2.035,594,3.073,595,2.035,596,2.035,597,2.035,598,2.035,599,2.035,600,3.073,601,2.035,602,2.035,603,2.035,604,3.073,605,3.073,606,2.035,607,2.035,608,2.035,609,2.035,610,2.035,611,2.035,612,2.035,613,2.035,614,2.035,615,2.035,616,2.035,617,1.67,618,2.035,619,2.035,620,2.035,621,2.035,622,2.035,623,2.035,624,1.67]],["title/modules.html",[58,1.763]],["body/modules.html",[19,0.034,54,0.034,55,0.034,57,2.592,58,1.837,67,2.049,68,2.049,69,2.049,572,4.43,584,3.461,625,5.397,626,5.397,627,5.593,628,4.216]],["title/overview.html",[629,3.32]],["body/overview.html",[2,1.658,19,0.04,54,0.028,55,0.028,56,1.074,57,3.407,58,1.327,59,1.479,60,1.872,61,1.872,62,1.479,63,1.658,64,1.658,65,2.499,66,2.499,67,2.848,68,2.41,69,2.693,70,2.521,71,1.872,72,1.658,84,1.872,122,1.817,124,2.253,133,2.253,135,2.136,184,2.499,185,2.499,186,2.524,187,2.524,188,2.524,201,1.193,363,2.499,364,2.499,365,2.499,629,2.499,630,4.1,631,3.044,632,3.044]],["title/properties.html",[277,2.517,468,2.056]],["body/properties.html",[19,0.04,54,0.035,55,0.035,277,3.1,502,3.62,617,3.62,624,3.62,633,4.409,634,4.409,635,4.409]],["title/miscellaneous/typealiases.html",[489,1.217,636,3.581]],["body/miscellaneous/typealiases.html",[10,0.726,19,0.033,21,0.726,54,0.033,55,0.033,96,3.005,102,1.989,112,3.005,127,2.179,140,2.46,220,3.435,456,3.709,460,3.435,462,2.813,489,1.945,637,4.001,638,4.012,639,3.285,640,3.285,641,5.495]],["title/miscellaneous/variables.html",[489,1.217,642,2.939]],["body/miscellaneous/variables.html",[10,0.409,19,0.04,20,1.063,21,0.409,32,0.797,33,0.646,34,1.853,45,0.984,54,0.023,55,0.023,96,1.388,102,1.708,127,1.229,128,1.587,129,2.334,134,1.388,137,2.334,138,1.587,140,1.388,161,0.718,166,1.388,173,1.229,214,2.769,216,3.157,232,2.769,251,3.566,253,2.726,255,3.566,265,2.042,268,2.334,283,4.374,284,3.745,305,1.587,386,1.587,449,2.726,454,2.726,456,3.053,457,2.726,458,3.8,460,2.334,461,2.726,462,1.587,463,1.853,464,2.726,465,2.726,489,1.097,638,3.234,639,1.853,640,2.726,642,1.853,643,2.258,644,2.258,645,3.321,646,3.321,647,4.343,648,5.004,649,2.258,650,2.258,651,2.258,652,2.258,653,3.321,654,3.321,655,2.258,656,2.258,657,2.258,658,2.258,659,3.321,660,3.321,661,2.258,662,3.321,663,2.258,664,2.258,665,2.258,666,4.628,667,4.628,668,2.258,669,2.258,670,3.321,671,2.258,672,2.258,673,2.258,674,2.258,675,2.258,676,2.258]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/GResponse.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":446,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":634,"title":{},"body":{"properties.html":{}}}],["0.1.12",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["0.36.0",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":631,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["1.18.1",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["1.4.7",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["10.0.0",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["3.23.8",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":630,"title":{},"body":{"overview.html":{}}}],["40",{"_index":670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["400",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["5.1.1",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["60",{"_index":673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7",{"_index":632,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["90",{"_index":674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_accesstoken",{"_index":322,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["_refreshtoken",{"_index":319,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["account",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["alias",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":637,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allowing",{"_index":560,"title":{},"body":{"index.html":{}}}],["already",{"_index":402,"title":{},"body":{"injectables/UsersService.html":{}}}],["amazing",{"_index":610,"title":{},"body":{"index.html":{}}}],["application",{"_index":530,"title":{},"body":{"index.html":{}}}],["applications",{"_index":501,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":57,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":427,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["argumentshost",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["async",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/UsersService.html":{}}}],["at(0",{"_index":400,"title":{},"body":{"injectables/UsersService.html":{}}}],["auth",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.gurad",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.gurad.ts",{"_index":300,"title":{},"body":{"injectables/GithubAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.gurad.ts:12",{"_index":340,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["auth.gurad.ts:5",{"_index":339,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["auth.gurad.ts:6",{"_index":306,"title":{},"body":{"injectables/GithubAuthGuard.html":{}}}],["auth.service",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalStratergy.html":{}}}],["auth/auth.module",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":85,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":308,"title":{},"body":{"injectables/GithubAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('github",{"_index":302,"title":{},"body":{"injectables/GithubAuthGuard.html":{}}}],["authguard('local",{"_index":338,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":67,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":617,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":122,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalStratergy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":628,"title":{},"body":{"modules.html":{}}}],["await",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":549,"title":{},"body":{"index.html":{}}}],["backers",{"_index":611,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":429,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["badrequestexception(errmessage",{"_index":441,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["based",{"_index":544,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(pwd",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(user.pwd",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["board",{"_index":603,"title":{},"body":{"index.html":{}}}],["body",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":286,"title":{},"body":{"classes/GResponse.html":{},"injectables/GithubAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["bootstrap",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":627,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":625,"title":{},"body":{"modules.html":{}}}],["building",{"_index":497,"title":{},"body":{"index.html":{}}}],["callbackurl",{"_index":330,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["canactivate",{"_index":303,"title":{},"body":{"injectables/GithubAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["canactivate(context",{"_index":304,"title":{},"body":{"injectables/GithubAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["catch",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/GithubStratergy.html":{}}}],["catch(exception",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["catch(httpexception",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["cb",{"_index":320,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["cb(e",{"_index":336,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["cb(null",{"_index":335,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["channel",{"_index":575,"title":{},"body":{"index.html":{}}}],["check",{"_index":538,"title":{},"body":{"index.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/GResponse.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/GResponse.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/GResponse.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{},"overview.html":{}}}],["clicks",{"_index":559,"title":{},"body":{"index.html":{}}}],["clientid",{"_index":326,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["clientsecret",{"_index":328,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["cloud",{"_index":543,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":363,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":364,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":366,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":365,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":566,"title":{},"body":{"index.html":{}}}],["comon/.../current",{"_index":643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["comon/classes/gresponse",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["comon/classes/gresponse.ts",{"_index":276,"title":{},"body":{"classes/GResponse.html":{},"coverage.html":{}}}],["comon/classes/gresponse.ts:4",{"_index":290,"title":{},"body":{"classes/GResponse.html":{}}}],["comon/classes/gresponse.ts:5",{"_index":285,"title":{},"body":{"classes/GResponse.html":{}}}],["comon/classes/gresponse.ts:6",{"_index":288,"title":{},"body":{"classes/GResponse.html":{}}}],["comon/classes/gresponse.ts:7",{"_index":280,"title":{},"body":{"classes/GResponse.html":{}}}],["comon/classes/validationexecptions.ts",{"_index":414,"title":{},"body":{"classes/ValidationException.html":{},"coverage.html":{}}}],["comon/classes/validationexecptions.ts:3",{"_index":417,"title":{},"body":{"classes/ValidationException.html":{}}}],["comon/decorators/current",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["comon/filters/execption",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["comon/pipes/zodvalidationpipe",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["comon/pipes/zodvalidationpipe.ts",{"_index":419,"title":{},"body":{"classes/ZodValidationPipe.html":{},"coverage.html":{}}}],["comon/pipes/zodvalidationpipe.ts:4",{"_index":424,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["comon/pipes/zodvalidationpipe.ts:7",{"_index":428,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["configmodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":259,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/GithubStratergy.html":{}}}],["configservice.getorthrow('database_url",{"_index":272,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('github_client_id",{"_index":327,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["configservice.getorthrow('github_client_secret",{"_index":329,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["conflictexception",{"_index":385,"title":{},"body":{"injectables/UsersService.html":{}}}],["conflictexception('a",{"_index":401,"title":{},"body":{"injectables/UsersService.html":{}}}],["connection",{"_index":267,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/UsersService.html":{}}}],["connection.ts",{"_index":454,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["connectionstring",{"_index":271,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["const",{"_index":33,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/UsersService.html":{},"classes/ZodValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GResponse.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{}}}],["constructor(authservice",{"_index":343,"title":{},"body":{"injectables/LocalStratergy.html":{}}}],["constructor(configservice",{"_index":316,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["constructor(database",{"_index":375,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(obj",{"_index":278,"title":{},"body":{"classes/GResponse.html":{}}}],["constructor(private",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStratergy.html":{},"classes/ZodValidationPipe.html":{}}}],["constructor(response",{"_index":415,"title":{},"body":{"classes/ValidationException.html":{}}}],["constructor(schema",{"_index":422,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["constructor(userservice",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":307,"title":{},"body":{"injectables/GithubAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":311,"title":{},"body":{"injectables/GithubAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["controller",{"_index":84,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"coverage.html":{},"overview.html":{}}}],["controller('auth",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["controllers",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["cookie",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"dependencies.html":{}}}],["core",{"_index":391,"title":{},"body":{"injectables/UsersService.html":{}}}],["courses",{"_index":581,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":442,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["created",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["createdat",{"_index":675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creategithubuserrequest",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["creategithubuserrequestschema",{"_index":457,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createlocaluserrequest",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["createlocaluserrequestschema",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createparamdecorator",{"_index":655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":372,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(user",{"_index":379,"title":{},"body":{"injectables/UsersService.html":{}}}],["ctx",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getresponse",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currentuser",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GResponse.html":{},"miscellaneous/variables.html":{}}}],["data.id",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.name",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["database",{"_index":378,"title":{},"body":{"injectables/UsersService.html":{}}}],["database/database",{"_index":266,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["database_connection",{"_index":265,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["databasemodule",{"_index":68,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["declarations",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorator.ts",{"_index":449,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["deeper",{"_index":577,"title":{},"body":{"index.html":{}}}],["default",{"_index":283,"title":{},"body":{"classes/GResponse.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GResponse.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{}}}],["delete",{"_index":407,"title":{},"body":{"injectables/UsersService.html":{}}}],["dependencies",{"_index":59,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":528,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":548,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":539,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":558,"title":{},"body":{"index.html":{}}}],["description",{"_index":502,"title":{},"body":{"index.html":{},"properties.html":{}}}],["deserializeuser",{"_index":355,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["deserializeuser(payload",{"_index":357,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["development",{"_index":513,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":589,"title":{},"body":{"index.html":{}}}],["discord",{"_index":574,"title":{},"body":{"index.html":{}}}],["dive",{"_index":576,"title":{},"body":{"index.html":{}}}],["doc",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["documentation",{"_index":443,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["done",{"_index":346,"title":{},"body":{"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{}}}],["done(null",{"_index":351,"title":{},"body":{"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{}}}],["drizzle",{"_index":262,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["drizzle(pool",{"_index":273,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["drizzle_client",{"_index":658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GithubStratergy.html":{}}}],["e2e",{"_index":523,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":498,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":536,"title":{},"body":{"index.html":{}}}],["email",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStratergy.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["email.split('@')?.[0",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["ensure",{"_index":534,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":593,"title":{},"body":{"index.html":{}}}],["eq",{"_index":387,"title":{},"body":{"injectables/UsersService.html":{}}}],["errmessage",{"_index":437,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["error",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/GResponse.html":{},"classes/ZodValidationPipe.html":{}}}],["error.message",{"_index":439,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["error.path.join",{"_index":438,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["errorresponse",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["example",{"_index":509,"title":{},"body":{"index.html":{}}}],["exception",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getresponse",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.message",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.name",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":9,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["executioncontext",{"_index":305,"title":{},"body":{"injectables/GithubAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["existinguser",{"_index":394,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":403,"title":{},"body":{"injectables/UsersService.html":{}}}],["experience",{"_index":579,"title":{},"body":{"index.html":{}}}],["export",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/GResponse.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{}}}],["exports",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"dependencies.html":{}}}],["expressresponse",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["extends",{"_index":301,"title":{},"body":{"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"classes/ValidationException.html":{}}}],["failed",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"classes/ZodValidationPipe.html":{}}}],["false",{"_index":287,"title":{},"body":{"classes/GResponse.html":{}}}],["fast",{"_index":552,"title":{},"body":{"index.html":{}}}],["features",{"_index":562,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["fetched",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["few",{"_index":554,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/GResponse.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{},"coverage.html":{}}}],["filter.ts",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["filter.ts:5",{"_index":17,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["focus",{"_index":561,"title":{},"body":{"index.html":{}}}],["follow",{"_index":597,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":411,"title":{},"body":{"injectables/UsersService.html":{}}}],["framework",{"_index":496,"title":{},"body":{"index.html":{}}}],["from(schema.userstable",{"_index":397,"title":{},"body":{"injectables/UsersService.html":{}}}],["full",{"_index":592,"title":{},"body":{"index.html":{}}}],["function",{"_index":358,"title":{},"body":{"injectables/SessionSerializer.html":{},"coverage.html":{}}}],["functions",{"_index":490,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":557,"title":{},"body":{"index.html":{}}}],["get('/github/cb",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/github/cb')@useguards(githubauthguard)@redirect('http://localhost:5000",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/github/login",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/github/login')@useguards(githubauthguard",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/me",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["get_user_data",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["get_user_data(@currentuser",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["get_user_data(user",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["getting",{"_index":492,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":373,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuser(id",{"_index":381,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemail",{"_index":374,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":383,"title":{},"body":{"injectables/UsersService.html":{}}}],["github",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["github.stratergy",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["github2",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GithubStratergy.html":{},"dependencies.html":{}}}],["github_cb",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["github_cb(@response",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["github_cb(res",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["github_login",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauthguard",{"_index":133,"title":{"injectables/GithubAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/GithubAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["githubid",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["githubstratergy",{"_index":186,"title":{"injectables/GithubStratergy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GithubStratergy.html":{},"coverage.html":{},"overview.html":{}}}],["graph",{"_index":584,"title":{},"body":{"index.html":{},"modules.html":{}}}],["gresponse",{"_index":131,"title":{"classes/GResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/GResponse.html":{},"coverage.html":{}}}],["grow",{"_index":607,"title":{},"body":{"index.html":{}}}],["hands",{"_index":578,"title":{},"body":{"index.html":{}}}],["handy",{"_index":567,"title":{},"body":{"index.html":{}}}],["help",{"_index":582,"title":{},"body":{"index.html":{}}}],["here",{"_index":615,"title":{},"body":{"index.html":{}}}],["host",{"_index":14,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["http://localhost:3000/auth/github/cb",{"_index":331,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["httpexception",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ValidationException.html":{}}}],["https://nestjs.com",{"_index":621,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/GResponse.html":{}}}],["httpstatus.internal_server_error",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpstatus.ok",{"_index":289,"title":{},"body":{"classes/GResponse.html":{}}}],["id",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ZodValidationPipe.html":{}}}],["import",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/GResponse.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{}}}],["imports",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GResponse.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{},"classes/ZodValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/GResponse.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{}}}],["information",{"_index":541,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":564,"title":{},"body":{"index.html":{}}}],["inject",{"_index":275,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/UsersService.html":{}}}],["inject(database_connection",{"_index":392,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":200,"title":{"injectables/AuthService.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["install",{"_index":556,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":511,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{}}}],["interact",{"_index":585,"title":{},"body":{"index.html":{}}}],["internal",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["isglobal",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["isvalid",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["job",{"_index":600,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":602,"title":{},"body":{"index.html":{}}}],["join",{"_index":613,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":618,"title":{},"body":{"index.html":{}}}],["keepsessioninfo",{"_index":341,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["key",{"_index":531,"title":{},"body":{"index.html":{}}}],["learn",{"_index":570,"title":{},"body":{"index.html":{}}}],["legend",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":624,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":605,"title":{},"body":{"index.html":{}}}],["linkedin",{"_index":599,"title":{},"body":{"index.html":{}}}],["local",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStratergy.html":{},"dependencies.html":{}}}],["local.stratergy",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["local_login",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["local_login(@response",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["local_login(res",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["local_signup",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["local_signup(@body",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["local_signup(body",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["localauthguard",{"_index":124,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["localstratergy",{"_index":187,"title":{"injectables/LocalStratergy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStratergy.html":{},"coverage.html":{},"overview.html":{}}}],["loginproviders",{"_index":458,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["looking",{"_index":542,"title":{},"body":{"index.html":{}}}],["loop",{"_index":595,"title":{},"body":{"index.html":{}}}],["makes",{"_index":550,"title":{},"body":{"index.html":{}}}],["managing",{"_index":563,"title":{},"body":{"index.html":{}}}],["matching",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/GResponse.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":546,"title":{},"body":{"index.html":{}}}],["message",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/GResponse.html":{}}}],["metadata",{"_index":426,"title":{},"body":{"classes/ZodValidationPipe.html":{},"dependencies.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{},"classes/ZodValidationPipe.html":{}}}],["miscellaneous",{"_index":489,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":604,"title":{},"body":{"index.html":{}}}],["mode",{"_index":516,"title":{},"body":{"index.html":{}}}],["module",{"_index":56,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":58,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":540,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":619,"title":{},"body":{"index.html":{}}}],["name",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GResponse.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["need",{"_index":590,"title":{},"body":{"index.html":{}}}],["nest",{"_index":503,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":623,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":529,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/GResponse.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/GithubStratergy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/UsersService.html":{},"classes/ZodValidationPipe.html":{},"coverage.html":{}}}],["newuser",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["newuser.at(0",{"_index":406,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":495,"title":{},"body":{"index.html":{}}}],["nodepgdatabase",{"_index":376,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`user",{"_index":410,"title":{},"body":{"injectables/UsersService.html":{}}}],["notnull",{"_index":669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notnull().unique",{"_index":671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["npm",{"_index":510,"title":{},"body":{"index.html":{}}}],["null",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GResponse.html":{},"injectables/GithubStratergy.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":416,"title":{},"body":{"classes/ValidationException.html":{}}}],["obj",{"_index":281,"title":{},"body":{"classes/GResponse.html":{}}}],["obj.data",{"_index":294,"title":{},"body":{"classes/GResponse.html":{}}}],["obj.error",{"_index":298,"title":{},"body":{"classes/GResponse.html":{}}}],["obj.message",{"_index":296,"title":{},"body":{"classes/GResponse.html":{}}}],["obj.status",{"_index":292,"title":{},"body":{"classes/GResponse.html":{}}}],["object",{"_index":660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["offer",{"_index":601,"title":{},"body":{"index.html":{}}}],["official",{"_index":547,"title":{},"body":{"index.html":{}}}],["open",{"_index":606,"title":{},"body":{"index.html":{}}}],["optional",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GResponse.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{}}}],["orm",{"_index":388,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["orm/node",{"_index":263,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/UsersService.html":{}}}],["orm/pg",{"_index":390,"title":{},"body":{"injectables/UsersService.html":{}}}],["out",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":629,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":468,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":18,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GResponse.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{}}}],["parsedvalue",{"_index":432,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["parsedvalue.data",{"_index":435,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["parsedvalue.error.errors[0",{"_index":436,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["parsedvalue.success",{"_index":434,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["parser",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["part",{"_index":591,"title":{},"body":{"index.html":{}}}],["partial",{"_index":279,"title":{},"body":{"classes/GResponse.html":{}}}],["passport",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalStratergy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportserializer",{"_index":354,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["passportstrategy",{"_index":323,"title":{},"body":{"injectables/GithubStratergy.html":{},"injectables/LocalStratergy.html":{}}}],["passportstrategy(strategy",{"_index":314,"title":{},"body":{"injectables/GithubStratergy.html":{},"injectables/LocalStratergy.html":{}}}],["password",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordfield",{"_index":349,"title":{},"body":{"injectables/LocalStratergy.html":{}}}],["payload",{"_index":360,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["pfpurl",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["pg",{"_index":261,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["pgenum('providers",{"_index":663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pgtable('users",{"_index":664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pguuid",{"_index":389,"title":{},"body":{"injectables/UsersService.html":{}}}],["pipetransform",{"_index":420,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["platform",{"_index":545,"title":{},"body":{"index.html":{}}}],["please",{"_index":573,"title":{},"body":{"index.html":{}}}],["pool",{"_index":260,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["possible",{"_index":537,"title":{},"body":{"index.html":{}}}],["post",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/local/login",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/local/signup",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/local/signup')@usepipes(new",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":264,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/UsersService.html":{}}}],["prefix",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["private",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GithubStratergy.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":518,"title":{},"body":{"index.html":{}}}],["profile",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GithubStratergy.html":{}}}],["profile.displayname",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["profile.emails?.[0]?.value",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["profile?.id",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["profile?.photos?.[0]?.value",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["progressive",{"_index":494,"title":{},"body":{"index.html":{}}}],["project",{"_index":507,"title":{},"body":{"index.html":{}}}],["properties",{"_index":277,"title":{"properties.html":{}},"body":{"classes/GResponse.html":{},"properties.html":{}}}],["provide",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{}}}],["provider",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providersenum",{"_index":464,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["providersenum().notnull",{"_index":672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pwd",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStratergy.html":{},"miscellaneous/variables.html":{}}}],["questions",{"_index":571,"title":{},"body":{"index.html":{}}}],["read",{"_index":614,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalStratergy.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":527,"title":{},"body":{"index.html":{}}}],["real",{"_index":586,"title":{},"body":{"index.html":{}}}],["redirect",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["redirect('http://localhost:5000",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["reflect",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":506,"title":{},"body":{"index.html":{}}}],["req",{"_index":310,"title":{},"body":{"injectables/GithubAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["request",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["request.ts",{"_index":456,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requiring",{"_index":553,"title":{},"body":{"index.html":{}}}],["res",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GithubAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["res.clearcookie('x",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.cookie('x",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(200).json",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(200).send('success",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(400).json",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":565,"title":{},"body":{"index.html":{}}}],["response",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/ValidationException.html":{}}}],["response.status(status).json",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["results",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/GResponse.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/UsersService.html":{},"classes/ZodValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":24,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{},"classes/ZodValidationPipe.html":{}}}],["run",{"_index":512,"title":{},"body":{"index.html":{}}}],["runs",{"_index":535,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":486,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":499,"title":{},"body":{"index.html":{}}}],["schema",{"_index":274,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/UsersService.html":{},"classes/ZodValidationPipe.html":{}}}],["schema.userstable.$inferinsert",{"_index":393,"title":{},"body":{"injectables/UsersService.html":{}}}],["scope",{"_index":332,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["select",{"_index":396,"title":{},"body":{"injectables/UsersService.html":{}}}],["serializer",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{}}}],["serializer.ts",{"_index":353,"title":{},"body":{"injectables/SessionSerializer.html":{},"coverage.html":{}}}],["serializer.ts:10",{"_index":359,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["serializer.ts:6",{"_index":362,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["serializeuser",{"_index":356,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["serializeuser(user",{"_index":361,"title":{},"body":{"injectables/SessionSerializer.html":{}}}],["server",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"index.html":{}}}],["session",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["sessionserializer",{"_index":188,"title":{"injectables/SessionSerializer.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SessionSerializer.html":{},"coverage.html":{},"overview.html":{}}}],["sessionuser",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sessionuserschema",{"_index":461,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["setup",{"_index":508,"title":{},"body":{"index.html":{}}}],["side",{"_index":500,"title":{},"body":{"index.html":{}}}],["signuplocal",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["signuplocal(user",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["simple",{"_index":555,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/GResponse.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{},"index.html":{}}}],["sponsors",{"_index":609,"title":{},"body":{"index.html":{}}}],["src/.../create",{"_index":638,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../database",{"_index":644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":491,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../schema.ts",{"_index":645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session",{"_index":639,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.ts",{"_index":640,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:40",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:51",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:56",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:61",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":370,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:11",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:14",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:34",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/github",{"_index":299,"title":{},"body":{"injectables/GithubAuthGuard.html":{},"coverage.html":{}}}],["src/auth/github.stratergy.ts",{"_index":313,"title":{},"body":{"injectables/GithubStratergy.html":{},"coverage.html":{}}}],["src/auth/github.stratergy.ts:22",{"_index":321,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["src/auth/github.stratergy.ts:9",{"_index":317,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["src/auth/local",{"_index":337,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/local.stratergy.ts",{"_index":342,"title":{},"body":{"injectables/LocalStratergy.html":{},"coverage.html":{}}}],["src/auth/local.stratergy.ts:14",{"_index":347,"title":{},"body":{"injectables/LocalStratergy.html":{}}}],["src/auth/local.stratergy.ts:7",{"_index":344,"title":{},"body":{"injectables/LocalStratergy.html":{}}}],["src/auth/session",{"_index":352,"title":{},"body":{"injectables/SessionSerializer.html":{},"coverage.html":{}}}],["src/database/database",{"_index":386,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/database.module",{"_index":369,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/database/database.module.ts",{"_index":258,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/main.ts",{"_index":455,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dto/create",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/dto/session",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/dto/user.ts",{"_index":462,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/schema.ts",{"_index":463,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/users.module",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":367,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GithubStratergy.html":{}}}],["src/users/users.service.ts",{"_index":371,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:15",{"_index":380,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:32",{"_index":382,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":384,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":377,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":514,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":517,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":519,"title":{},"body":{"index.html":{}}}],["started",{"_index":493,"title":{"index.html":{}},"body":{}}],["starter",{"_index":505,"title":{},"body":{"index.html":{}}}],["statements",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/GResponse.html":{},"classes/ValidationException.html":{}}}],["statuscode",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["stay",{"_index":594,"title":{},"body":{"index.html":{}}}],["steps",{"_index":532,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":551,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":324,"title":{},"body":{"injectables/GithubStratergy.html":{},"injectables/LocalStratergy.html":{}}}],["string",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"classes/GResponse.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalStratergy.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["successfully",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["super",{"_index":325,"title":{},"body":{"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{}}}],["super(response",{"_index":418,"title":{},"body":{"classes/ValidationException.html":{}}}],["super.canactivate(context",{"_index":309,"title":{},"body":{"injectables/GithubAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["super.login(req",{"_index":312,"title":{},"body":{"injectables/GithubAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["support",{"_index":572,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":626,"title":{},"body":{"modules.html":{}}}],["table",{"_index":467,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":466,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":533,"title":{},"body":{"index.html":{}}}],["test",{"_index":522,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":525,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":524,"title":{},"body":{"index.html":{}}}],["tests",{"_index":520,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":608,"title":{},"body":{"index.html":{}}}],["this.authservice.signuplocal(body",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validategithubuser(profile",{"_index":334,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["this.authservice.validatelocaluser(email",{"_index":350,"title":{},"body":{"injectables/LocalStratergy.html":{}}}],["this.data",{"_index":293,"title":{},"body":{"classes/GResponse.html":{}}}],["this.database",{"_index":395,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.database.insert(schema.userstable).values(user).returning",{"_index":404,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.database.select().from(schema.userstable).where(eq(schema.userstable.email",{"_index":412,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.database.select().from(schema.userstable).where(eq(schema.userstable.id",{"_index":409,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.error",{"_index":297,"title":{},"body":{"classes/GResponse.html":{}}}],["this.message",{"_index":295,"title":{},"body":{"classes/GResponse.html":{}}}],["this.schema",{"_index":431,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["this.schema.safeparse(value",{"_index":433,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["this.status",{"_index":291,"title":{},"body":{"classes/GResponse.html":{}}}],["this.userservice.createuser(user",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getuser(user.id",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.getuserbyemail(email",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"classes/ZodValidationPipe.html":{}}}],["time",{"_index":587,"title":{},"body":{"index.html":{}}}],["timestamp().defaultnow",{"_index":676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["touch",{"_index":616,"title":{},"body":{"index.html":{}}}],["transform",{"_index":421,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["transform(value",{"_index":425,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["true",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/LocalAuthGuard.html":{}}}],["try",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GithubStratergy.html":{}}}],["twitter",{"_index":622,"title":{},"body":{"index.html":{}}}],["type",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GResponse.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/ZodValidationPipe.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":636,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/UsersService.html":{}}}],["types",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":504,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["unauthorizedexception('github",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["unit",{"_index":521,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GithubAuthGuard.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStratergy.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":635,"title":{},"body":{"properties.html":{}}}],["updates",{"_index":596,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":270,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["useguards",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(githubauthguard",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('/local/login",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["usepipes",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["usepipes(new",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GithubStratergy.html":{},"injectables/LocalStratergy.html":{},"injectables/SessionSerializer.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":399,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.id",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.name",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.pfpurl",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.provider",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.pwd",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.ts",{"_index":460,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user:email",{"_index":333,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["user?.id",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["userexist",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexist.id",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexist.name",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["usernamefield",{"_index":348,"title":{},"body":{"injectables/LocalStratergy.html":{}}}],["users.service",{"_index":368,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/schema",{"_index":269,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["users/users.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["userschema",{"_index":268,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GithubStratergy.html":{}}}],["usersmodule",{"_index":69,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":135,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GithubStratergy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userstable",{"_index":465,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["userwithoutpwd",{"_index":405,"title":{},"body":{"injectables/UsersService.html":{}}}],["userwithoutpwd?.pwd",{"_index":408,"title":{},"body":{"injectables/UsersService.html":{}}}],["using",{"_index":588,"title":{},"body":{"index.html":{}}}],["uuid().primarykey().defaultrandom",{"_index":665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":315,"title":{},"body":{"injectables/GithubStratergy.html":{},"injectables/LocalStratergy.html":{}}}],["validate(_accesstoken",{"_index":318,"title":{},"body":{"injectables/GithubStratergy.html":{}}}],["validate(email",{"_index":345,"title":{},"body":{"injectables/LocalStratergy.html":{}}}],["validategithubuser",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["validategithubuser(profile",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatelocaluser",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatelocaluser(email",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":440,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["validationexception",{"_index":413,"title":{"classes/ValidationException.html":{}},"body":{"classes/ValidationException.html":{},"coverage.html":{}}}],["value",{"_index":284,"title":{},"body":{"classes/GResponse.html":{},"classes/ZodValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":642,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":633,"title":{},"body":{"properties.html":{}}}],["video",{"_index":580,"title":{},"body":{"index.html":{}}}],["visit",{"_index":569,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":583,"title":{},"body":{"index.html":{}}}],["void",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/SessionSerializer.html":{}}}],["watch",{"_index":515,"title":{},"body":{"index.html":{}}}],["website",{"_index":620,"title":{},"body":{"index.html":{}}}],["where(eq(schema.userstable.email",{"_index":398,"title":{},"body":{"injectables/UsersService.html":{}}}],["working",{"_index":568,"title":{},"body":{"index.html":{}}}],["x",{"_index":598,"title":{},"body":{"index.html":{}}}],["yes",{"_index":282,"title":{},"body":{"classes/GResponse.html":{}}}],["you'd",{"_index":612,"title":{},"body":{"index.html":{}}}],["you're",{"_index":526,"title":{},"body":{"index.html":{}}}],["z",{"_index":659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum(['github",{"_index":654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.infer",{"_index":641,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["z.literal('email').default('email",{"_index":652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal('github').default('github",{"_index":649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.object",{"_index":646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string",{"_index":648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().email",{"_index":647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().min(4",{"_index":651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().nullable",{"_index":650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().nullable().optional",{"_index":653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().optional",{"_index":661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zod",{"_index":430,"title":{},"body":{"classes/ZodValidationPipe.html":{},"dependencies.html":{}}}],["zodschema",{"_index":423,"title":{},"body":{"classes/ZodValidationPipe.html":{}}}],["zodvalidationpipe",{"_index":114,"title":{"classes/ZodValidationPipe.html":{}},"body":{"controllers/AuthController.html":{},"classes/ZodValidationPipe.html":{},"coverage.html":{}}}],["zodvalidationpipe(createlocaluserrequestschema",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["zoom",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            comon/filters/execption-filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in comon/filters/execption-filter.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException, HttpStatus } from '@nestjs/common';\n\n@Catch(HttpException)\nexport class AllExceptionsFilter implements ExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n\n    const status =\n      exception instanceof HttpException ? exception.getStatus() : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    let errorResponse: any;\n    if (exception instanceof HttpException) {\n      errorResponse = exception.getResponse();\n      if (typeof errorResponse === 'string') {\n        errorResponse = { message: errorResponse };\n      }\n    } else if (exception instanceof Error) {\n      errorResponse = {\n        message: exception.message,\n        error: exception.name,\n      };\n    } else {\n      errorResponse = {\n        message: 'Internal server error',\n        error: 'Unknown Error',\n      };\n    }\n\n    response.status(status).json({\n      statusCode: status,\n      ...errorResponse,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseModule } from './database/database.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [ConfigModule.forRoot({ isGlobal: true }), DatabaseModule, UsersModule, AuthModule],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                get_user_data\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                github_cb\n                            \n                            \n                                    \n                                    \n                                    Async\n                                github_login\n                            \n                            \n                                    \n                                    \n                                    Async\n                                local_login\n                            \n                            \n                                    \n                                    \n                                    Async\n                                local_signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        get_user_data\n                        \n                    \n                \n            \n            \n                \n                        \n                    get_user_data(user: SessionUser, res: ExpressResponse)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/me')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            SessionUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        ExpressResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        github_cb\n                        \n                    \n                \n            \n            \n                \n                        \n                    github_cb(res: ExpressResponse, user: SessionUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/github/cb')@UseGuards(GithubAuthGuard)@Redirect('http://localhost:5000')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        ExpressResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            SessionUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        github_login\n                        \n                    \n                \n            \n            \n                \n                        \n                    github_login()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/github/login')@UseGuards(GithubAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        local_login\n                        \n                    \n                \n            \n            \n                \n                        \n                    local_login(res: ExpressResponse, user: SessionUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('/local/login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        ExpressResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            SessionUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        local_signup\n                        \n                    \n                \n            \n            \n                \n                        \n                    local_signup(body: CreateLocalUserRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/local/signup')@UsePipes(new ZodValidationPipe())\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            CreateLocalUserRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Post,\n    Redirect,\n    UseGuards,\n    UsePipes,\n    Response,\n    UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalAuthGuard } from './local-auth.gurad';\nimport type { CreateLocalUserRequest } from 'src/users/dto/create-user-request';\nimport { createLocalUserRequestSchema } from 'src/users/dto/create-user-request';\nimport { ZodValidationPipe } from 'comon/pipes/zodValidationPipe';\nimport { GResponse } from 'comon/classes/GResponse';\nimport { GithubAuthGuard } from './github-auth.gurad';\nimport { UsersService } from 'src/users/users.service';\nimport { CurrentUser } from 'comon/decorators/current-user-decorator';\nimport type { SessionUser } from 'src/users/dto/session-user';\nimport type { Response as ExpressResponse } from 'express';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        private readonly authService: AuthService,\n        private readonly userService: UsersService,\n    ) { }\n\n    @UseGuards(LocalAuthGuard)\n    @Post('/local/login')\n    async local_login(@Response() res: ExpressResponse, @CurrentUser() user: SessionUser) {\n        res.cookie('x-auth-cookie', user?.id);\n        res.status(200).send('Success');\n    }\n\n    @Post('/local/signup')\n    @UsePipes(new ZodValidationPipe(createLocalUserRequestSchema))\n    async local_signup(@Body() body: CreateLocalUserRequest) {\n        const newUser = await this.authService.signupLocal(body);\n        return new GResponse({\n            status: 201,\n            message: 'New user created successfully',\n            data: newUser,\n        });\n    }\n\n    @Get('/github/login')\n    @UseGuards(GithubAuthGuard)\n    async github_login() { }\n\n    @Get('/github/cb')\n    @UseGuards(GithubAuthGuard)\n    @Redirect('http://localhost:5000')\n    async github_cb(@Response() res: ExpressResponse, @CurrentUser() user: SessionUser) {\n        res.cookie('x-auth-cookie', user?.id);\n    }\n\n    @Get('/me')\n    async get_user_data(@CurrentUser() user: SessionUser, @Response() res: ExpressResponse) {\n        if (user == null) {\n            res.clearCookie('x-auth-cookie');\n            return res.status(400).json({\n                data: undefined,\n                message: 'User fetch failed',\n                status: 400,\n            });\n        }\n        let data = await this.userService.getUser(user.id);\n        return res.status(200).json({\n            data: data,\n            message: 'User fetched successfully',\n            status: 200,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGithubAuthGuard\n\nGithubAuthGuard\n\nAuthModule -->\n\nGithubAuthGuard->AuthModule\n\n\n\n\n\nGithubStratergy\n\nGithubStratergy\n\nAuthModule -->\n\nGithubStratergy->AuthModule\n\n\n\n\n\nLocalAuthGuard\n\nLocalAuthGuard\n\nAuthModule -->\n\nLocalAuthGuard->AuthModule\n\n\n\n\n\nLocalStratergy\n\nLocalStratergy\n\nAuthModule -->\n\nLocalStratergy->AuthModule\n\n\n\n\n\nSessionSerializer\n\nSessionSerializer\n\nAuthModule -->\n\nSessionSerializer->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GithubAuthGuard\n                        \n                        \n                            GithubStratergy\n                        \n                        \n                            LocalAuthGuard\n                        \n                        \n                            LocalStratergy\n                        \n                        \n                            SessionSerializer\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { LocalStratergy } from './local.stratergy';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthController } from './auth.controller';\nimport { LocalAuthGuard } from './local-auth.gurad';\nimport { SessionSerializer } from './session-serializer';\nimport { GithubAuthGuard } from './github-auth.gurad';\nimport { GithubStratergy } from './github.stratergy';\n\n@Module({\n  imports: [forwardRef(() => UsersModule), PassportModule.register({ session: true })],\n  providers: [\n    AuthService,\n    LocalStratergy,\n    LocalAuthGuard,\n    SessionSerializer,\n    GithubAuthGuard,\n    GithubStratergy,\n  ],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                validateGithubUser\n                            \n                            \n                                    Async\n                                validateLocalUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                        \n                    signupLocal(user: CreateLocalUserRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            CreateLocalUserRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateGithubUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateGithubUser(profile: Profile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateLocalUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateLocalUser(email: string, pwd: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pwd\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, UnauthorizedException } from '@nestjs/common';\nimport { UsersService } from './../users/users.service';\nimport bcrypt from 'bcrypt';\nimport type {\n  CreateGithubUserRequest,\n  CreateLocalUserRequest,\n} from 'src/users/dto/create-user-request';\nimport { Profile } from 'passport-github2';\n\n@Injectable()\nexport class AuthService {\n  constructor(private readonly userService: UsersService) {}\n\n  async validateLocalUser(email: string, pwd: string) {\n    const user = await this.userService.getUserByEmail(email);\n    if (user.pwd == null) {\n      throw new UnauthorizedException('Invalid email or Password');\n    }\n    const isValid = await bcrypt.compare(pwd, user.pwd);\n    if (!isValid) {\n      throw new UnauthorizedException('Invalid Password');\n    }\n    return { name: user.name, id: user.id };\n  }\n\n  async signupLocal(user: CreateLocalUserRequest) {\n    user.provider = 'email';\n    user.pfpUrl = user.pfpUrl ?? null;\n    user.pwd = await bcrypt.hash(user.pwd, 10);\n    const doc = await this.userService.createUser(user);\n    return doc;\n  }\n\n  async validateGithubUser(profile: Profile) {\n    const email: string | null = profile.emails?.[0]?.value || null;\n    if (!email) {\n      throw new UnauthorizedException('GitHub account does not provide an email');\n    }\n    try {\n      const userExist = await this.userService.getUserByEmail(email);\n      return { name: userExist.name, id: userExist.id };\n    } catch (e) {\n      if (e instanceof NotFoundException) {\n        const name: string = profile.displayName || email.split('@')?.[0] || 'Github user';\n        const pfpUrl: string | null = profile?.photos?.[0]?.value || null;\n        const githubId: string = profile?.id;\n        if (!githubId) {\n          throw new UnauthorizedException('GitHub account does not provide an id');\n        }\n        const user: CreateGithubUserRequest = {\n          name,\n          pfpUrl,\n          githubId,\n          email,\n          provider: 'github',\n        };\n        const data = await this.userService.createUser(user);\n        return { name: data.name, id: data.id };\n      }\n      throw e;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport { DATABASE_CONNECTION } from '../database/database-connection';\nimport * as userSchema from '../users/schema';\n\n@Module({\n  providers: [\n    {\n      provide: DATABASE_CONNECTION,\n      useFactory: (configService: ConfigService) => {\n        const pool = new Pool({\n          connectionString: configService.getOrThrow('DATABASE_URL'),\n        });\n        return drizzle(pool, {\n          schema: {\n            ...userSchema,\n          },\n        });\n      },\n      inject: [ConfigService],\n    },\n  ],\n  exports: [DATABASE_CONNECTION],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GResponse.html":{"url":"classes/GResponse.html","title":"class - GResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            comon/classes/GResponse.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                error\n                            \n                            \n                                message\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(obj?: Partial)\n                    \n                \n                        \n                            \n                                Defined in comon/classes/GResponse.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        obj\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in comon/classes/GResponse.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in comon/classes/GResponse.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in comon/classes/GResponse.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpStatus\n\n                    \n                \n                \n                    \n                        Default value : HttpStatus.OK\n                    \n                \n                    \n                        \n                                Defined in comon/classes/GResponse.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\n\nexport class GResponse {\n  status: HttpStatus = HttpStatus.OK;\n  data: any = null;\n  message: string = '';\n  error: boolean = false;\n\n  constructor(obj?: Partial) {\n    if (obj) {\n      this.status = obj.status ?? HttpStatus.OK;\n      this.data = obj.data ?? null;\n      this.message = obj.message ?? '';\n      this.error = obj.error ?? false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GithubAuthGuard.html":{"url":"injectables/GithubAuthGuard.html","title":"injectable - GithubAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GithubAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/github-auth.gurad.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('github')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/github-auth.gurad.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class GithubAuthGuard extends AuthGuard('github') {\n  async canActivate(context: ExecutionContext) {\n    const res = (await super.canActivate(context)) as boolean;\n    const req = context.switchToHttp().getRequest();\n    await super.logIn(req);\n    return res;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GithubStratergy.html":{"url":"injectables/GithubStratergy.html","title":"injectable - GithubStratergy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GithubStratergy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/github.stratergy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, authService: AuthService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/github.stratergy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(_accessToken: string, _refreshToken: string, profile: Profile, cb: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/github.stratergy.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cb\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, Profile } from 'passport-github2';\nimport { Injectable } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { ConfigService } from '@nestjs/config';\nimport { UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class GithubStratergy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly authService: AuthService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      clientID: configService.getOrThrow('GITHUB_CLIENT_ID'),\n      clientSecret: configService.getOrThrow('GITHUB_CLIENT_SECRET'),\n      callBackUrl: 'http://localhost:3000/auth/github/cb',\n      scope: ['user:email'],\n    });\n  }\n  async validate(_accessToken: string, _refreshToken: string, profile: Profile, cb: any) {\n    try {\n      const user = await this.authService.validateGithubUser(profile);\n      return cb(null, user);\n    } catch (e) {\n      return cb(e, null);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local-auth.gurad.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/local-auth.gurad.ts:5\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/local-auth.gurad.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {\n  constructor() {\n    super({\n      keepSessionInfo: true,\n    });\n  }\n\n  async canActivate(context: ExecutionContext) {\n    const res = (await super.canActivate(context)) as boolean;\n    const req = context.switchToHttp().getRequest();\n    await super.logIn(req);\n    return res;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStratergy.html":{"url":"injectables/LocalStratergy.html","title":"injectable - LocalStratergy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStratergy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.stratergy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.stratergy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, pwd: string, done: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/local.stratergy.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pwd\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { Injectable } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStratergy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      usernameField: 'email',\n      passwordField: 'pwd',\n    });\n  }\n  async validate(email: string, pwd: string, done: any) {\n    const user = await this.authService.validateLocalUser(email, pwd);\n    return done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionSerializer.html":{"url":"injectables/SessionSerializer.html","title":"injectable - SessionSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/session-serializer.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportSerializer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deserializeUser\n                            \n                            \n                                serializeUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deserializeUser\n                        \n                    \n                \n            \n            \n                \ndeserializeUser(payload: any, done: Function)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/session-serializer.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                            Function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serializeUser\n                        \n                    \n                \n            \n            \n                \nserializeUser(user: any, done: Function)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/session-serializer.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                            Function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportSerializer } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class SessionSerializer extends PassportSerializer {\n  serializeUser(user: any, done: Function) {\n    done(null, user);\n  }\n\n  deserializeUser(payload: any, done: Function) {\n    done(null, payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { DatabaseModule } from 'src/database/database.module';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [DatabaseModule, forwardRef(() => AuthModule)],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(database: NodePgDatabase<>)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                    NodePgDatabase<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(user)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Inject, Injectable, NotFoundException } from '@nestjs/common';\nimport { NodePgDatabase } from 'drizzle-orm/node-postgres';\nimport { DATABASE_CONNECTION } from '../../src/database/database-connection';\nimport * as schema from './schema';\nimport { eq } from 'drizzle-orm';\nimport { PgUUID } from 'drizzle-orm/pg-core';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @Inject(DATABASE_CONNECTION)\n    private readonly database: NodePgDatabase,\n  ) {}\n\n  async createUser(user: typeof schema.usersTable.$inferInsert) {\n    const existingUser = (\n      await this.database\n        .select()\n        .from(schema.usersTable)\n        .where(eq(schema.usersTable.email, user.email))\n    ).at(0);\n\n    if (existingUser) {\n      throw new ConflictException('A user with this email already exists.');\n    }\n    const newUser = await this.database.insert(schema.usersTable).values(user).returning();\n    const userWithoutPwd = { ...newUser.at(0) };\n    delete userWithoutPwd?.pwd;\n    return userWithoutPwd;\n  }\n\n  async getUser(id: string) {\n    const user = (\n      await this.database.select().from(schema.usersTable).where(eq(schema.usersTable.id, id))\n    ).at(0);\n    if (!user) {\n      throw new NotFoundException(`User with id ${id} not found`);\n    }\n    return user;\n  }\n\n  async getUserByEmail(email: string) {\n    const user = (\n      await this.database.select().from(schema.usersTable).where(eq(schema.usersTable.email, email))\n    ).at(0);\n    if (!user) {\n      throw new NotFoundException(`User with id ${email} not found`);\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationException.html":{"url":"classes/ValidationException.html","title":"class - ValidationException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            comon/classes/validationExecptions.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(response: any, status: number)\n                    \n                \n                        \n                            \n                                Defined in comon/classes/validationExecptions.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        response\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException } from '@nestjs/common';\n\nexport class ValidationException extends HttpException {\n  constructor(response: any, status: number) {\n    super(response, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ZodValidationPipe.html":{"url":"classes/ZodValidationPipe.html","title":"class - ZodValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ZodValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            comon/pipes/zodValidationPipe.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        PipeTransform\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(schema: ZodSchema)\n                    \n                \n                        \n                            \n                                Defined in comon/pipes/zodValidationPipe.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                    ZodSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in comon/pipes/zodValidationPipe.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentMetadata, BadRequestException, PipeTransform } from '@nestjs/common';\nimport { ZodSchema } from 'zod';\n\nexport class ZodValidationPipe implements PipeTransform {\n  constructor(private schema: ZodSchema) {}\n\n  transform(value: any, metadata: ArgumentMetadata) {\n    if (!this.schema) return value;\n    const parsedValue = this.schema.safeParse(value);\n    if (parsedValue.success) {\n      return parsedValue.data;\n    } else {\n      const error = parsedValue.error.errors[0];\n      const errMessage = error ? `${error.path.join('.')} - ${error.message}` : 'Validation failed';\n      throw new BadRequestException(errMessage);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                comon/classes/GResponse.ts\n            \n            class\n            GResponse\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                comon/classes/validationExecptions.ts\n            \n            class\n            ValidationException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        comon/decorators/current-user-decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                comon/filters/execption-filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                comon/pipes/zodValidationPipe.ts\n            \n            class\n            ZodValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/github-auth.gurad.ts\n            \n            injectable\n            GithubAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/github.stratergy.ts\n            \n            injectable\n            GithubStratergy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local-auth.gurad.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local.stratergy.ts\n            \n            injectable\n            LocalStratergy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/session-serializer.ts\n            \n            injectable\n            SessionSerializer\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/database/database-connection.ts\n            \n            variable\n            DATABASE_CONNECTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/dto/create-user-request.ts\n            \n            variable\n            createGithubUserRequestSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/dto/create-user-request.ts\n            \n            variable\n            createLocalUserRequestSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/dto/create-user-request.ts\n            \n            variable\n            loginProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/dto/create-user-request.ts\n            \n            type alias\n            CreateGithubUserRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/dto/create-user-request.ts\n            \n            type alias\n            CreateLocalUserRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/dto/session-user.ts\n            \n            variable\n            SessionUserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/dto/session-user.ts\n            \n            type alias\n            SessionUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/dto/user.ts\n            \n            variable\n            loginProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/dto/user.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/dto/user.ts\n            \n            type alias\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/schema.ts\n            \n            variable\n            providersEnum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/schema.ts\n            \n            variable\n            usersTable\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            bcrypt : ^5.1.1\n        \n            cookie-parser : ^1.4.7\n        \n            drizzle-orm : ^0.36.0\n        \n            express-session : ^1.18.1\n        \n            passport-github2 : ^0.1.12\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            zod : ^3.23.8\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGithubAuthGuard\n\nGithubAuthGuard\n\nAuthModule -->\n\nGithubAuthGuard->AuthModule\n\n\n\n\n\nGithubStratergy\n\nGithubStratergy\n\nAuthModule -->\n\nGithubStratergy->AuthModule\n\n\n\n\n\nLocalAuthGuard\n\nLocalAuthGuard\n\nAuthModule -->\n\nLocalAuthGuard->AuthModule\n\n\n\n\n\nLocalStratergy\n\nLocalStratergy\n\nAuthModule -->\n\nLocalStratergy->AuthModule\n\n\n\n\n\nSessionSerializer\n\nSessionSerializer\n\nAuthModule -->\n\nSessionSerializer->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CreateGithubUserRequest   (src/.../create-user-request.ts)\n                        \n                        \n                            CreateLocalUserRequest   (src/.../create-user-request.ts)\n                        \n                        \n                            SessionUser   (src/.../session-user.ts)\n                        \n                        \n                            User   (src/.../user.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/dto/create-user-request.ts\n    \n    \n        \n            \n                \n                    \n                    CreateGithubUserRequest\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CreateLocalUserRequest\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/users/dto/session-user.ts\n    \n    \n        \n            \n                \n                    \n                    SessionUser\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/users/dto/user.ts\n    \n    \n        \n            \n                \n                    \n                    User\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            createGithubUserRequestSchema   (src/.../create-user-request.ts)\n                        \n                        \n                            createLocalUserRequestSchema   (src/.../create-user-request.ts)\n                        \n                        \n                            CurrentUser   (comon/.../current-user-decorator.ts)\n                        \n                        \n                            DATABASE_CONNECTION   (src/.../database-connection.ts)\n                        \n                        \n                            loginProviders   (src/.../create-user-request.ts)\n                        \n                        \n                            loginProviders   (src/.../user.ts)\n                        \n                        \n                            providersEnum   (src/.../schema.ts)\n                        \n                        \n                            SessionUserSchema   (src/.../session-user.ts)\n                        \n                        \n                            UserSchema   (src/.../user.ts)\n                        \n                        \n                            usersTable   (src/.../schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/dto/create-user-request.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createGithubUserRequestSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  email: z.string().email(),\n  name: z.string(),\n  provider: z.literal('github').default('github'),\n  pfpUrl: z.string().nullable(),\n  githubId: z.string(),\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createLocalUserRequestSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  email: z.string().email(),\n  name: z.string(),\n  pwd: z.string().min(4),\n  provider: z.literal('email').default('email'),\n  pfpUrl: z.string().nullable().optional(),\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginProviders\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.enum(['github', 'email'])\n                    \n                \n\n\n        \n    \n\n    comon/decorators/current-user-decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): SessionUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user ?? null;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/database/database-connection.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DATABASE_CONNECTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'DRIZZLE_CLIENT'\n                    \n                \n\n\n        \n    \n\n    src/users/dto/user.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loginProviders\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.enum(['github', 'email'])\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    email: z.string().email(),\n    name: z.string(),\n    id: z.string(),\n    provider: loginProviders,\n    pwd: z.string().optional(),\n    pfpUrl: z.string().nullable().optional(),\n  })\n  .nullable()\n                    \n                \n\n\n        \n    \n\n    src/users/schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        providersEnum\n                        \n                    \n                \n            \n                \n                    \n                        Default value : pgEnum('providers', ['email', 'github'])\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usersTable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : pgTable('users', {\n  id: uuid().primaryKey().defaultRandom(),\n  name: varchar({ length: 50 }).notNull(),\n  email: varchar({ length: 40 }).notNull().unique(),\n  provider: providersEnum().notNull(),\n  pwd: varchar({ length: 60 }),\n  githubId: varchar({ length: 40 }),\n  pfpUrl: varchar({ length: 90 }),\n  createdAt: timestamp().defaultNow(),\n})\n                    \n                \n\n\n        \n    \n\n    src/users/dto/session-user.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SessionUserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    email: z.string().email(),\n    name: z.string(),\n    id: z.string(),\n  })\n  .nullable()\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
